from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
from langchain_community.document_loaders import PyPDFLoader
from langchain_community.vectorstores import FAISS
from langchain_groq import ChatGroq
from langchain_huggingface import HuggingFaceEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.chains import RetrievalQA
from langdetect import detect
import os

# Initialize Flask app
app = Flask(__name__)

# Set up your Groq API key
groq_api_key = "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"
llm = ChatGroq(groq_api_key=groq_api_key, model_name="llama-3.1-8b-instant")

# User data dictionary to store names and current section
user_data = {}

# Original translations dictionary
translations = {
    "en": {
        "info": "Here's the information you requested:\n\n",
        "support": "To support you, here's what I found:\n\n",
        "taskhelp": "Here's a guide to help you with your task:\n\n",
        "video": "Here's a relevant video or related information:\n\n",
        "context": "in Malaysia"
    },
    "zh": {
        "info": "ш┐ЩцШпцВишп╖ц▒ВчЪДф┐бцБпя╝Ъ\n\n",
        "support": "ф╕║ф║ЖцФпцМБцВия╝Мш┐ЩцШпцИСхПСчО░чЪДхЖЕхо╣я╝Ъ\n\n",
        "taskhelp": "ш┐ЩцШпх╕охКйцВихоМцИРф╗╗хКбчЪДцМЗхНЧя╝Ъ\n\n",
        "video": "ш┐ЩцШпчЫ╕хЕ│шзЖщвСцИЦчЫ╕хЕ│ф┐бцБпя╝Ъ\n\n",
        "context": "хЬищймцЭеше┐ф║Ъ"
    },
    "ms": {
        "info": "Inilah maklumat yang anda minta:\n\n",
        "support": "Untuk menyokong anda, berikut adalah apa yang saya dapati:\n\n",
        "taskhelp": "Berikut adalah panduan untuk membantu anda dengan tugas anda:\n\n",
        "video": "Berikut adalah video atau maklumat yang berkaitan:\n\n",
        "context": "di Malaysia"
    },
    "ta": {
        "info": "роирпАроЩрпНроХро│рпН роХрпЗроЯрпНроЯ родроХро╡ро▓рпН роЗроЩрпНроХрпЗ:\n\n",
        "support": "роЙроЩрпНроХро│рпБроХрпНроХрпБ роЖродро░ро╡рпБ роЕро│ро┐роХрпНроХ, роиро╛ройрпН роХрогрпНроЯро▒ро┐роирпНродродрпБ роЗроЩрпНроХрпЗ:\n\n",
        "taskhelp": "роЙроЩрпНроХро│рпН рокрогро┐ропро┐ро▓рпН роЙродро╡ роТро░рпБ ро╡ро┤ро┐роХро╛роЯрпНроЯро┐ роЗроЩрпНроХрпЗ:\n\n",
        "video": "роЗроЩрпНроХрпЗ роТро░рпБ родрпКроЯро░рпНрокрпБроЯрпИроп ро╡рпАроЯро┐ропрпЛ роЕро▓рпНро▓родрпБ родрпКроЯро░рпНрокрпБроЯрпИроп родроХро╡ро▓рпН:\n\n",
        "context": "рооро▓рпЗроЪро┐ропро╛ро╡ро┐ро▓рпН"
    }
}

# Navigation menu with numbers
navigation_menu = {
    "en": """Please select a number to continue:
    1. ЁЯза Stroke Education
    2. ЁЯТК Medication Management
    3. ЁЯдЭ Emotional Support
    4. ЁЯПЛя╕ПтАНтЩАя╕П Rehabilitation Guidance
    5. ЁЯМР Resources & Contacts
    6. тЪая╕П Emergency Response

    Type 'menu' or 'back' to return to this menu
    Type 'help' for section-specific guidance""",
        
        "zh": """шп╖щАЙцЛйф╕Аф╕кцХ░хнЧч╗зч╗ня╝Ъ
    1. ЁЯза ф╕нщгОцХЩшВ▓
    2. ЁЯТК шНпчЙйчобчРЖ
    3. ЁЯдЭ цГЕцДЯцФпцМБ
    4. ЁЯПЛя╕ПтАНтЩАя╕П х║╖хдНцМЗхп╝
    5. ЁЯМР ш╡Дц║Рф╕ОшБФч│╗
    6. тЪая╕П ч┤зцАехУНх║Ф

    ш╛УхЕе 'menu' цИЦ 'back' ш┐ФхЫЮцндшПЬхНХ
    ш╛УхЕе 'help' шО╖хПЦщГихИЖчЙ╣хоЪцМЗхп╝""",
        
        "ms": """Sila pilih nombor untuk meneruskan:
    1. ЁЯза Pendidikan Strok
    2. ЁЯТК Pengurusan Ubat
    3. ЁЯдЭ Sokongan Emosi
    4. ЁЯПЛя╕ПтАНтЩАя╕П Panduan Pemulihan
    5. ЁЯМР Sumber & Hubungan
    6. тЪая╕П Respons Kecemasan

    Taip 'menu' atau 'back' untuk kembali ke menu ini
    Taip 'help' untuk panduan khusus bahagian""",
        
        "ta": """родрпКроЯро░ роТро░рпБ роОрогрпНрогрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН:
    1. ЁЯза рокроХрпНроХро╡ро╛родроХрпН роХро▓рпНро╡ро┐
    2. ЁЯТК рооро░рпБроирпНродрпБ роорпЗро▓ро╛рогрпНроорпИ
    3. ЁЯдЭ роЙрогро░рпНроЪрпНроЪро┐ роЖродро░ро╡рпБ
    4. ЁЯПЛя╕ПтАНтЩАя╕П рооро▒рпБро╡ро╛ро┤рпНро╡рпБ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН
    5. ЁЯМР ро╡ро│роЩрпНроХро│рпН & родрпКроЯро░рпНрокрпБроХро│рпН
    6. тЪая╕П роЕро╡роЪро░ рокродро┐ро▓рпН

    роорпЖройрпБро╡рпБроХрпНроХрпБродрпН родро┐ро░рпБроорпНрок 'menu' роЕро▓рпНро▓родрпБ 'back' роР родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН
    рокро┐ро░ро┐ро╡рпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпБроХрпНроХрпБ 'help' роР родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН"""
}

# Multilingual help messages for each section
section_help = {
    "1": {
        "en": """Stroke Education Help:
    - Learn about different types of strokes
    - Understand stroke risk factors
    - Get information about stroke prevention
    - Ask about post-stroke complications
    Example: "What are the early signs of stroke?"
    """,
        "zh": """ф╕нщгОцХЩшВ▓х╕охКйя╝Ъ
    - ф║Жшзгф╕НхРМч▒╗хЮЛчЪДф╕нщгО
    - чРЖшзгф╕нщгОщгОщЩйхЫач┤а
    - шО╖хПЦф╕нщгОщвДщШ▓ф┐бцБп
    - шпвщЧоф╕нщгОхРОх╣╢хПСчЧЗ
    чд║ф╛Ля╝Ъ"ф╕нщгОчЪДцЧйцЬЯх╛БхЕЖцШпф╗Аф╣Ия╝Я"
    """,
        "ms": """Bantuan Pendidikan Strok:
    - Pelajari tentang jenis-jenis strok
    - Fahami faktor risiko strok
    - Dapatkan maklumat pencegahan strok
    - Tanya tentang komplikasi selepas strok
    Contoh: "Apakah tanda-tanda awal strok?"
    """,
            "ta": """рокроХрпНроХро╡ро╛родроХрпН роХро▓рпНро╡ро┐ роЙродро╡ро┐:
    - ро╡рпЖро╡рпНро╡рпЗро▒рпБ ро╡роХрпИропро╛рой рокроХрпНроХро╡ро╛родроЩрпНроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЕро▒ро┐ропро╡рпБроорпН
    - рокроХрпНроХро╡ро╛род роЖрокродрпНродрпБ роХро╛ро░рогро┐роХро│рпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ро╡рпБроорпН
    - рокроХрпНроХро╡ро╛род родроЯрпБрокрпНрокрпБ родроХро╡ро▓рпНроХро│рпИрокрпН рокрпЖро▒ро╡рпБроорпН
    - рокроХрпНроХро╡ро╛родродрпНродро┐ро▒рпНроХрпБрокрпН рокро┐роирпНродрпИроп роЪро┐роХрпНроХро▓рпНроХро│рпИрокрпН рокро▒рпНро▒ро┐ роХрпЗроЯрпНроХро╡рпБроорпН
    роЙродро╛ро░рогроорпН: "рокроХрпНроХро╡ро╛родродрпНродро┐ройрпН роЖро░роорпНрок роЕро▒ро┐роХрпБро▒ро┐роХро│рпН роОройрпНрой?"
    """
        },
        "2": {
            "en": """Medication Management Help:
    - Get information about stroke medications
    - Learn about proper dosage and timing
    - Understand side effects
    - Get storage instructions
    Example: "What are common blood thinners for stroke?"
    """,
            "zh": """шНпчЙйчобчРЖх╕охКйя╝Ъ
    - шО╖хПЦф╕нщгОшНпчЙйф┐бцБп
    - ф║ЖшзгцнгчбочЪДхЙВщЗПхТМцЧ╢щЧ┤
    - чРЖшзгхЙпф╜ЬчФи
    - шО╖хПЦхВихнШшп┤цШО
    чд║ф╛Ля╝Ъ"ф╕нщгОх╕╕чФичЪДшбАц╢▓чиАщЗКхЙВцЬЙхУкф║Ыя╝Я"
    """,
            "ms": """Bantuan Pengurusan Ubat:
    - Dapatkan maklumat tentang ubat-ubatan strok
    - Pelajari tentang dos dan masa yang betul
    - Fahami kesan sampingan
    - Dapatkan arahan penyimpanan
    Contoh: "Apakah pengcair darah yang biasa untuk strok?"
    """,
            "ta": """рооро░рпБроирпНродрпБ роорпЗро▓ро╛рогрпНроорпИ роЙродро╡ро┐:
    - рокроХрпНроХро╡ро╛род рооро░рпБроирпНродрпБроХро│рпН рокро▒рпНро▒ро┐роп родроХро╡ро▓рпНроХро│рпИрокрпН рокрпЖро▒ро╡рпБроорпН
    - роЪро░ро┐ропро╛рой роЕро│ро╡рпБ рооро▒рпНро▒рпБроорпН роирпЗро░роорпН рокро▒рпНро▒ро┐ роЕро▒ро┐ропро╡рпБроорпН
    - рокроХрпНроХ ро╡ро┐ро│рпИро╡рпБроХро│рпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ро╡рпБроорпН
    - роЪрпЗрооро┐рокрпНрокрпБ ро╡ро┤ро┐роорпБро▒рпИроХро│рпИрокрпН рокрпЖро▒ро╡рпБроорпН
    роЙродро╛ро░рогроорпН: "рокроХрпНроХро╡ро╛родродрпНродро┐ро▒рпНроХро╛рой рокрпКродрпБро╡ро╛рой роЗро░родрпНрод роорпЖро▓рпНро▓ро┐родро╛роХрпНроХро┐роХро│рпН роОройрпНрой?"
    """
        },
        "3": {
            "en": """Emotional Support Help:
    - Get daily motivation
    - Learn stress management techniques
    - Find coping strategies
    - Access mental health resources
    Example: "How can I manage caregiver stress?"
    """,
            "zh": """цГЕцДЯцФпцМБх╕охКйя╝Ъ
    - шО╖хПЦцпПцЧец┐АхК▒
    - хнжф╣ахОЛхКЫчобчРЖцКАх╖з
    - хп╗цЙ╛х║Фхп╣чнЦчХе
    - шО╖хПЦх┐ГчРЖхБех║╖ш╡Дц║Р
    чд║ф╛Ля╝Ъ"хжВф╜ХчобчРЖцКдчРЖф║║хСШчЪДхОЛхКЫя╝Я"
    """,
            "ms": """Bantuan Sokongan Emosi:
    - Dapatkan motivasi harian
    - Pelajari teknik pengurusan tekanan
    - Cari strategi menghadapi
    - Akses sumber kesihatan mental
    Contoh: "Bagaimana saya boleh menguruskan tekanan penjaga?"
    """,
            "ta": """роЙрогро░рпНроЪрпНроЪро┐ роЖродро░ро╡рпБ роЙродро╡ро┐:
    - родро┐ройроЪро░ро┐ роКроХрпНроХродрпНродрпИрокрпН рокрпЖро▒ро╡рпБроорпН
    - роорой роЕро┤рпБродрпНрод роорпЗро▓ро╛рогрпНроорпИ роирпБроЯрпНрокроЩрпНроХро│рпИ роЕро▒ро┐ропро╡рпБроорпН
    - роЪрооро╛ро│ро┐роХрпНроХрпБроорпН роЙродрпНродро┐роХро│рпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН
    - роорой роиро▓ роЖродро╛ро░роЩрпНроХро│рпИ роЕрогрпБроХро╡рпБроорпН
    роЙродро╛ро░рогроорпН: "рокро░ро╛рооро░ро┐рокрпНрокро╛ро│ро░рпН роорой роЕро┤рпБродрпНродродрпНродрпИ роОро╡рпНро╡ро╛ро▒рпБ роиро┐ро░рпНро╡роХро┐рокрпНрокродрпБ?"
    """
        },
        "4": {
            "en": """Rehabilitation Guidance Help:
    - Get exercise tutorials
    - Learn about daily activity adaptations
    - Understand rehabilitation techniques
    - Track recovery progress
    Example: "What exercises help with arm strength?"
    """,
            "zh": """х║╖хдНцМЗхп╝х╕охКйя╝Ъ
    - шО╖хПЦш┐РхКицХЩчиЛ
    - ф║ЖшзгцЧех╕╕ц┤╗хКищАВх║Ф
    - чРЖшзгх║╖хдНцКАх╖з
    - ш╖Яш╕кцБвхдНш┐Ых▒Х
    чд║ф╛Ля╝Ъ"хУкф║Ыш┐РхКицЬЙхКйф║ОхвЮх╝║цЙЛшЗВхКЫщЗПя╝Я"
    """,
            "ms": """Bantuan Panduan Pemulihan:
    - Dapatkan tutorial senaman
    - Pelajari tentang penyesuaian aktiviti harian
    - Fahami teknik pemulihan
    - Jejak kemajuan pemulihan
    Contoh: "Apakah senaman yang membantu kekuatan lengan?"
    """,
            "ta": """рооро▒рпБро╡ро╛ро┤рпНро╡рпБ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН роЙродро╡ро┐:
    - роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐ рокропро┐ро▒рпНроЪро┐роХро│рпИрокрпН рокрпЖро▒ро╡рпБроорпН
    - родро┐ройроЪро░ро┐ роЪрпЖропро▓рпНрокро╛роЯрпНроЯрпБ родроХро╡роорпИрокрпНрокрпБроХро│рпИрокрпН рокро▒рпНро▒ро┐ роЕро▒ро┐ропро╡рпБроорпН
    - рооро▒рпБро╡ро╛ро┤рпНро╡рпБ роирпБроЯрпНрокроЩрпНроХро│рпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ро╡рпБроорпН
    - роорпАроЯрпНрокрпБ роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН
    роЙродро╛ро░рогроорпН: "роХрпИ ро╡ро▓ро┐роорпИроХрпНроХрпБ роОроирпНрод рокропро┐ро▒рпНроЪро┐роХро│рпН роЙродро╡рпБроорпН?"
    """
        },
        "5": {
            "en": """Resources & Contacts Help:
    - Find local stroke rehabilitation centers
    - Access financial assistance information
    - Get support helplines
    - Find transport and home care services
    - Access video resources and guides
    Example: "What stroke support services are available near me?"
    """,
            "zh": """ш╡Дц║Рф╕ОшБФч│╗х╕охКйя╝Ъ
    - цЯецЙ╛х╜УхЬ░ф╕нщгОх║╖хдНф╕нх┐Г
    - шО╖хПЦш┤вхКбцП┤хКйф┐бцБп
    - шО╖хПЦцФпцМБчГнч║┐
    - цЯецЙ╛ф║дщАЪхТМхо╢х║нцКдчРЖцЬНхКб
    - шо┐щЧошзЖщвСш╡Дц║РхТМцМЗхНЧ
    чд║ф╛Ля╝Ъ"цИСщЩДш┐СцЬЙхУкф║Ыф╕нщгОцФпцМБцЬНхКбя╝Я"
    """,
            "ms": """Bantuan Sumber & Hubungan:
    - Cari pusat pemulihan strok tempatan
    - Akses maklumat bantuan kewangan
    - Dapatkan talian bantuan sokongan
    - Cari perkhidmatan pengangkutan dan penjagaan di rumah
    - Akses sumber dan panduan video
    Contoh: "Apakah perkhidmatan sokongan strok yang tersedia berdekatan saya?"
    """,
            "ta": """ро╡ро│роЩрпНроХро│рпН & родрпКроЯро░рпНрокрпБроХро│рпН роЙродро╡ро┐:
    - роЙро│рпНро│рпВро░рпН рокроХрпНроХро╡ро╛род рооро▒рпБро╡ро╛ро┤рпНро╡рпБ роорпИропроЩрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН
    - роиро┐родро┐ роЙродро╡ро┐ родроХро╡ро▓рпНроХро│рпИ роЕрогрпБроХро╡рпБроорпН
    - роЖродро░ро╡рпБ роЙродро╡ро┐ роОрогрпНроХро│рпИрокрпН рокрпЖро▒ро╡рпБроорпН
    - рокрпЛроХрпНроХрпБро╡ро░родрпНродрпБ рооро▒рпНро▒рпБроорпН ро╡рпАроЯрпНроЯрпБ рокро░ро╛рооро░ро┐рокрпНрокрпБ роЪрпЗро╡рпИроХро│рпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН
    - ро╡рпАроЯро┐ропрпЛ ро╡ро│роЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН ро╡ро┤ро┐роХро╛роЯрпНроЯро┐роХро│рпИ роЕрогрпБроХро╡рпБроорпН
    роЙродро╛ро░рогроорпН: "роОройрпН роЕро░рпБроХро┐ро▓рпН роОройрпНрой рокроХрпНроХро╡ро╛род роЖродро░ро╡рпБ роЪрпЗро╡рпИроХро│рпН роЙро│рпНро│рой?"
    """
        },
        "6": {
            "en": """Emergency Response Help:
    - Learn FAST stroke detection
    - Understand when to call emergency services
    - Get first aid guidance
    - Monitor vital signs
    Example: "What are the FAST signs of stroke?"
    """,
            "zh": """ч┤зцАехУНх║Фх╕охКйя╝Ъ
    - хнжф╣аFASTф╕нщгОцгАц╡Л
    - ф║Жшзгф╜ХцЧ╢хС╝хПлч┤зцАецЬНхКб
    - шО╖хПЦцАецХСцМЗхп╝
    - чЫСц╡ЛчФЯхС╜ф╜Ух╛Б
    чд║ф╛Ля╝Ъ"FASTф╕нщгОх╛БхЕЖцШпф╗Аф╣Ия╝Я"
    """,
            "ms": """Bantuan Respons Kecemasan:
    - Pelajari pengesanan strok FAST
    - Fahami bila hendak menghubungi perkhidmatan kecemasan
    - Dapatkan panduan pertolongan cemas
    - Pantau tanda-tanda vital
    Contoh: "Apakah tanda-tanda FAST untuk strok?"
    """,
            "ta": """роЕро╡роЪро░ рокродро┐ро▓рпН роЙродро╡ро┐:
    - FAST рокроХрпНроХро╡ро╛род роХрогрпНроЯро▒ро┐родро▓рпИроХрпН роХро▒рпНро▒рпБроХрпНроХрпКро│рпНро│ро╡рпБроорпН
    - роЕро╡роЪро░ роЪрпЗро╡рпИроХро│рпИ роОрокрпНрокрпЛродрпБ роЕро┤рпИроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН роОройрпНрокродрпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ро╡рпБроорпН
    - роорпБродро▓рпБродро╡ро┐ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпИрокрпН рокрпЖро▒ро╡рпБроорпН
    - роЙропро┐ро░рпНроиро╛роЯро┐ роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН
    роЙродро╛ро░рогроорпН: "рокроХрпНроХро╡ро╛родродрпНродро┐ройрпН FAST роЕро▒ро┐роХрпБро▒ро┐роХро│рпН роОройрпНрой?"
    """
        }
}

class ChatbotAgent:
    def __init__(self):
        self.qa_interface = self.setup_chatbot()

    def setup_chatbot(self):
        pdf_paths = [
            "./data/caknaStroke2.pdf",
            "./data/FinancialAids.pdf",
            "./data/strokes.pdf",
            "./data/Penjagaan_Pesakit_Strok_Translated.pdf"
        ]

        combined_text = ""
        # Load PDFs
        for pdf_path in pdf_paths:
            try:
                loader = PyPDFLoader(pdf_path)
                try:
                    pdf_text = loader.load()
                    combined_text += "\n\n".join([doc.page_content for doc in pdf_text]) + "\n\n"
                except Exception as e:
                    print(f"Error loading {pdf_path}: {str(e)}")
                    continue
            except Exception as e:
                print(f"Error with PDF {pdf_path}: {str(e)}")
                continue

        # Add medication guide content directly from txt file
        try:
            with open("./data/medication_guide.txt", "r", encoding='utf-8') as f:
                medication_guide = f.read()
            combined_text += "\n\n" + medication_guide
        except Exception as e:
            print(f"Error loading medication guide: {str(e)}")

        text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
        texts = text_splitter.create_documents([combined_text])

        directory = "./data/index_store"
        vector_index = FAISS.from_documents(
            texts,
            HuggingFaceEmbeddings(model_name='sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')
        )
        vector_index.save_local(directory)

        vector_index = FAISS.load_local(
            directory,
            HuggingFaceEmbeddings(model_name='sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2'),
            allow_dangerous_deserialization=True
        )

        retriever = vector_index.as_retriever(search_type="similarity", search_kwargs={"k": 6})
        qa_interface = RetrievalQA.from_chain_type(
            llm=llm,
            chain_type="stuff",
            retriever=retriever,
            return_source_documents=True,
        )

        return qa_interface

    def get_context_for_navigation(self, section_number):
        contexts = {
            "1": "Context: Information about stroke types, causes, risk factors, prevention, and warning signs.",
            "2": "Context: Information about stroke medications including antiplatelets, anticoagulants, blood pressure medications, and statins, their dosages, and usage guidelines.",
            "3": "Context: Support and coping strategies for stroke caregivers, including stress management and emotional wellbeing.",
            "4": "Context: Stroke rehabilitation exercises, physical therapy techniques, and recovery guidance.",
            "5": "Context: Focus ONLY on available resources including: video resources from CaknaStroke, local stroke support services, medical facilities, and financial assistance programs in Malaysia. When asked about videos or educational content, prioritize providing information about available video resources.",
            "6": "Context: Emergency response protocols, FAST method, and immediate actions for stroke emergencies."
        }
        return contexts.get(section_number, "")

    def extract_name_with_llm(self, user_input):
        extraction_prompt = f"Extract the name from this sentence: '{user_input}'. If there is no name, respond with 'None'. Keep in mind, just provide the name and nothing else."
        response = llm.invoke(extraction_prompt)
        extracted_name = response.content.strip()
        return None if extracted_name.lower() == "none" else extracted_name

    def detect_language(self, text):
        try:
            return detect(text)
        except Exception as e:
            print(f"Language detection error: {e}")
            return "en"

    def process_query(self, query, section_number=None):
        direct_instruction = "Provide direct, clear answers without phrases like 'according to the provided information' or 'the information states'. Just state the facts directly."
        
        if section_number:
            context = self.get_context_for_navigation(section_number)
            
            # Special handling for Resources section
            if section_number == "5" and ("video" in query.lower() or "watch" in query.lower()):
                specific_instruction = "Focus ONLY on providing information about available video resources and educational content. Do not provide general stroke information."
                query_with_context = f"{direct_instruction}\n\n{specific_instruction}\n\n{context}\n\nUser query: {query}"
            else:
                query_with_context = f"{direct_instruction}\n\n{context}\n\nUser query: {query}"
                
            return self.qa_interface.invoke({"query": query_with_context})["result"]
        return self.qa_interface.invoke({"query": f"{direct_instruction}\n\nUser query: {query}"})["result"]

chatbot_agent = ChatbotAgent()

@app.route("/webhook", methods=['POST'])
def webhook():
    incoming_msg = request.values.get('Body', '').strip()
    phone_number = request.values.get('From', '')
    detected_language = chatbot_agent.detect_language(incoming_msg)
    
    # Initialize user data if not exists
    if phone_number not in user_data:
        user_data[phone_number] = {"name": None, "current_section": None}

    twilio_response = MessagingResponse()

    # Handle name collection
    if user_data[phone_number]["name"] is None:
        if incoming_msg.lower() in ["hi", "hey", "hello"]:
            name_request = {
                "en": "Hi there! Before we continue, could you please tell me your name?",
                "zh": "цВихе╜я╝БхЬич╗зч╗нф╣ЛхЙНя╝МцВишГ╜хСКшпЙцИСцВичЪДхРНхнЧхРЧя╝Я",
                "ms": "Hai! Sebelum kita teruskan, bolehkah anda beritahu saya nama anda?",
                "ta": "ро╡рогроХрпНроХроорпН! родрпКроЯро░рпБро╡родро▒рпНроХрпБ роорпБройрпН роЙроЩрпНроХро│рпН рокрпЖропро░рпИ роЪрпКро▓рпНро▓ роорпБроЯро┐ропрпБрооро╛?"
            }
            twilio_response.message(name_request.get(detected_language, name_request["en"]))
            return str(twilio_response)
        else:
            extracted_name = chatbot_agent.extract_name_with_llm(incoming_msg)
            if extracted_name:
                user_data[phone_number]["name"] = extracted_name
                # Send welcome message and navigation menu
                welcome_message = {
                    "en": f"Thank you, {extracted_name}!",
                    "zh": f"ш░вш░вцВи, {extracted_name}я╝Б",
                    "ms": f"Terima kasih, {extracted_name}!",
                    "ta": f"роиройрпНро▒ро┐, {extracted_name}!"
                }
                twilio_response.message(welcome_message.get(detected_language, welcome_message["en"]))
                twilio_response.message(navigation_menu.get(detected_language, navigation_menu["en"]))
                return str(twilio_response)
            else:
                name_request = {
                    "en": "I couldn't quite catch your name. Could you please provide it again?",
                    "zh": "цИСц▓бшГ╜хРмц╕ЕцВичЪДхРНхнЧуАВшп╖цВихЖНцПРф╛Ыф╕Ацмбхе╜хРЧя╝Я",
                    "ms": "Saya tidak dapat menangkap nama anda. Bolehkah anda berikan sekali lagi?",
                    "ta": "роиро╛ройрпН роЙроЩрпНроХро│рпН рокрпЖропро░рпИрокрпН рокро┐роЯро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН."
                }
                twilio_response.message(name_request.get(detected_language, name_request["en"]))
                return str(twilio_response)

    # Handle navigation commands
    if incoming_msg.lower() in ["menu", "back"]:
        user_data[phone_number]["current_section"] = None
        twilio_response.message(navigation_menu.get(detected_language, navigation_menu["en"]))
        return str(twilio_response)

    # Handle help command
    if incoming_msg.lower() == "help":
        current_section = user_data[phone_number]["current_section"]
        if current_section:
            twilio_response.message(section_help[current_section].get(detected_language, section_help[current_section]["en"]))
        else:
            twilio_response.message(navigation_menu.get(detected_language, navigation_menu["en"]))
        return str(twilio_response)

    # Handle section selection
    if incoming_msg in ["1", "2", "3", "4", "5", "6"]:
        user_data[phone_number]["current_section"] = incoming_msg
        twilio_response.message(section_help[incoming_msg].get(detected_language, section_help[incoming_msg]["en"]))
        return str(twilio_response)

    # Process query based on current section
    current_section = user_data[phone_number]["current_section"]
    if current_section is None:
        twilio_response.message(navigation_menu.get(detected_language, navigation_menu["en"]))
        return str(twilio_response)

    # Get response using the chatbot agent
    response_text = chatbot_agent.process_query(incoming_msg, current_section)
    user_name = user_data[phone_number]["name"]
    formatted_response = f"{user_name}, {response_text}"

    # Split long responses into chunks
    if len(formatted_response) > 1500:
        chunks = [formatted_response[i:i + 1500] for i in range(0, len(formatted_response), 1500)]
        for chunk in chunks:
            twilio_response.message(chunk)
    else:
        twilio_response.message(formatted_response)

    return str(twilio_response)

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=8000)
